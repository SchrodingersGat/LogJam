import re,os
import time

from code_writer import CodeWriter

#LOGJAM version
LOGJAM_VERSION = "0.1"
    
#bitfield struct of the format Device_LogBitfield_t"
def bitfieldStruct(prefix):
    return "{prefix}_LogBitfield_t".format(prefix=prefix)
    
#data struct for the format Device_LogData_t
def dataStruct(prefix):
    return "{prefix}_LogData_t".format(prefix=prefix)

#header file define string
def headerDefine(prefix):
    return "_LOG_{prefix}_DEFS_H_".format(prefix=prefix.upper())
    
#header file name
def headerFilename(prefix):
    return "log_{prefix}_defs".format(prefix=prefix.lower())
    
class LogFile:
    def __init__(self, vars, prefix, version, outputdir=None):
        self.variables = vars
        self.prefix = prefix
        self.version = version
        
        hfile = headerFilename(prefix) + '.h'
        cfile = headerFilename(prefix) + '.c'
        
        if outputdir:
            hfile = os.path.join(outputdir, hfile)
            cfile = os.path.join(outputdir, cfile)
        
        self.hFile = CodeWriter(hfile)
        self.cFile = CodeWriter(cfile)
    
    def createHeaderEntry(self):
        self.hFile.startIf(headerDefine(self.prefix),invert=True)
        self.hFile.define(headerDefine(self.prefix))
        
    def createHeaderExit(self):
        self.hFile.endIf()
        
    def createHeaderInclude(self):
        self.cFile.include('"{file}.h"'.format(file=headerFilename(self.prefix)))
        
    def createAutogenInfo(self):
        self.hFile.startComment()
        self.hFile.appendLine("Logging structure definitions for the {device}".format(device=self.prefix))
        self.hFile.appendLine("This file was created using LogJam v{version}".format(version=LOGJAM_VERSION))
        self.hFile.appendLine("Generated at " + time.ctime())
        self.hFile.appendLine("LogJam - https://github.com/SchrodingersGat/LogJam")
        self.hFile.finishComment()
        self.hFile.appendLine()
        
    def createVersionString(self):
    
        major, minor = self.version.split('.')
        self.hFile.define("{prefix}_GetLogVersion()".format(prefix=self.prefix),
                          '"{version}"'.format(version=self.version),
                          comment="{prefix} Log revision number string".format(prefix=self.prefix))
        self.hFile.define("{prefix}_LOG_VERSION_MAJOR".format(prefix=self.prefix.upper()),
                          "{version}".format(version=major),
                          comment="Major version number")
        self.hFile.define("{prefix}_LOG_VERISION_MINOR".format(prefix=self.prefix.upper()),
                          "{version}".format(version=minor),
                          comment="Minor version number")
        self.hFile.appendLine()
        
    def createDoNotEat(self):
        self.hFile.startComment()
        self.hFile.appendLine('Do not edit this file!')
        self.hFile.appendLine('This file was auto-generated and any changes will be overwritten')
        self.hFile.appendLine('Edit the source .xml document instead')
        self.hFile.finishComment()
        self.hFile.appendLine()
        
    def constructCodeFile(self):
        
        self.cFile.clear()
        
        #include the header file
        self.createHeaderInclude()
        
        self.cFile.appendLine()
        
        #add in the global functions
        self.cFile.startComment()
        self.cFile.appendLine("Global functions")
        self.cFile.finishComment()
        
        self.createResetFunction()
        self.createCopyAllFunction()
        self.createCopySelectedFunction()
        self.createCopyAllFromFunction()
        
        self.cFile.appendLine()
        self.cFile.startComment()
        self.cFile.appendLine("Individual variable functions")
        self.cFile.finishComment()
        
        self.cFile.appendLine()
        
        #add in the functions to add variables
        for v in self.variables:
            self.createAdditionFunction(v)
            self.createRemoveFunction(v)
       
    def constructHeaderFile(self):
        
        self.hFile.clear()
        
        self.createDoNotEat()
        
        self.createHeaderEntry()
        
        self.hFile.appendLine()
        
        self.hFile.include('<stdint.h>', comment='Primitive definitions')
        self.hFile.include('<string.h>', comment='memcpy function')
        
        self.hFile.appendLine()
        
        self.hFile.externEntry()
        
        self.createAutogenInfo()
        self.createVersionString()
        
        self.hFile.appendLine()
        self.createGlobalEnum()
        
        self.hFile.appendComment("Bitfield struct definition for the " + self.prefix + " logging struct")
        self.createBitfieldStruct()
        self.hFile.appendLine()
        self.hFile.appendComment("Data struct definition for the " + self.prefix + " logging struct")
        self.createDataStruct()
        
        self.hFile.appendLine()
        
        self.hFile.startComment()
        self.hFile.appendLine("Global Functions:")
        self.hFile.finishComment()
        
        self.hFile.appendComment("Reset the bitfield of the logging structure")
        self.hFile.appendLine(self.resetPrototype() + ";")
        
        self.hFile.appendComment('Copy *all* data from the logging structure')
        self.hFile.appendLine(self.copyAllPrototype() + ';')
        
        self.hFile.appendComment("Copy *selected* data from the logging structure")
        self.hFile.appendLine(self.copySelectedPrototype() + ";")
        
        self.hFile.appendComment('Copy all data back out from a buffer')
        self.hFile.appendLine(self.copyAllFromPrototype() + ';')
        
        self.hFile.appendLine()
        
        self.hFile.startComment()
        self.hFile.appendLine("Variable Functions:")
        self.hFile.appendLine("These functions are applied to individual variables within the logging structure")
        self.hFile.finishComment()
        
        #add in the 'addition' functions
        for var in self.variables:
            self.hFile.appendLine(self.additionPrototype(var) + "; //Add " + var.prefix + " to the log struct")
            self.hFile.appendLine(self.removePrototype(var) + ';')
        
        self.hFile.appendLine()
        self.hFile.externExit()
        
        self.createHeaderExit()
    
    def saveFiles(self):
        
        self.constructHeaderFile()
        self.constructCodeFile()
        
        self.hFile.writeToFile()
        self.cFile.writeToFile() 
        
    #create the enumeration of all the variables
    def createGlobalEnum(self):
        self.hFile.appendComment('Global enum of all variables available for the {prefix} logging structure'.format(prefix=self.prefix))
        self.hFile.appendLine('typedef enum')
        self.hFile.openBrace()
        
        #start at zero
        self.hFile.appendLine('LOG_{pref}_NONE = 0x00,'.format(pref=self.prefix.upper()))
        
        for v in self.variables:
            self.hFile.appendLine(v.getEnum() + ',')
        
        #give it a name
        self.hFile.tabOut()
        self.hFile.appendLine('}} {pref}_LogEnum_t;\n'.format(pref=self.prefix))
        
        self.hFile.appendComment('Number of parameters in the {pref} logging structure'.format(pref=self.prefix))
        
        self.hFile.define('LOG_{pref}_VARIABLE_COUNT'.format(pref=self.prefix.upper()),
                          value=str(len(self.variables)))
                          
        self.hFile.appendLine()
        
        
    #create the struct of the variables
    def createDataStruct(self):
    
        self.hFile.appendLine('typedef struct {')
        
        self.hFile.tabIn()
        
        for v in self.variables:
            self.hFile.appendComment('Variable : {name}, {units}'.format(name=v.name,units=v.units))
            
            if v.scaler > 1:
                self.hFile.appendComment('{name} will be scaled by {scaler} when decoded to a log file'.format(name=v.name,scaler=v.scaler))
            self.hFile.appendLine(v.dataString())
        
        self.hFile.tabOut()
        
        self.hFile.appendLine('} ' + dataStruct(self.prefix) + ';')
        
    #create a bitfield struct of all variables
    def createBitfieldStruct(self):
    
        self.hFile.appendLine('typedef struct {')
        
        self.hFile.tabIn()
        
        for v in self.variables:
            self.hFile.appendLine(v.bitfieldString())
            
        self.hFile.tabOut()
        
        self.hFile.appendLine('} ' + bitfieldStruct(self.prefix) + ';')
        
    def removePrototype(self,var):
        return self.createVariableFunction(var,'remove',inline=True,data=False)
        
    #create a function to remove a var from the logging structure
    def createRemoveFunction(self, var):
        self.cFile.appendComment("Remove variable {name} from the {prefix} loggin structure".format(name=var.name,prefix=self.prefix))
        self.cFile.appendLine(self.removePrototype(var))
        self.cFile.openBrace()
        self.cFile.appendLine(var.clearBit('selection'))
        self.cFile.closeBrace()
        self.cFile.appendLine()
        
    def additionPrototype(self,var):
        return self.createVariableFunction(var,'add',inline=True)
        
    #create the function for adding a variable to the logging structure
    def createAdditionFunction(self, var):
    
        self.cFile.appendComment('Add variable {name} to the {prefix} logging struct'.format(
                        name=var.name,
                        prefix=self.prefix))
                        
        self.cFile.appendLine(self.additionPrototype(var))
        self.cFile.openBrace()
        self.cFile.appendLine(var.setBit('selection'))
        #now actually add the variable in
        self.cFile.appendLine(var.addVariable('data'))
        self.cFile.closeBrace()
        self.cFile.appendLine()
        
    def createVariableFunction(self, var, name, **params):
        name = var.getFunctionName(name)
        
        return self.createFunctionPrototype(name,params={'*'+var.name : var.format},**params)
        
    def createFunctionPrototype(self, name, data=True, bits=True, inline=False, returnType='void', params={}):
        
        #pass extra parameters to the function as such
        #params = {'*dest': 'void'} (name, type)
        paramstring = ""
        for k in params.keys():
            paramstring += ', '
            paramstring += params[k]
            paramstring += ' '
            paramstring += k
            
        return '{inline}{returnType} {prefix}Log_{name}({data}{comma}{bits}{params})'.format(
                    inline='inline ' if inline else '',
                    returnType=returnType,
                    prefix=self.prefix.capitalize(),
                    name=name,
                    comma=', ' if data and bits else '',
                    data=dataStruct(self.prefix) + " *data" if data else "",
                    bits=bitfieldStruct(self.prefix) + " *selection" if bits else "",
                    params=paramstring)
                    
    def resetPrototype(self):
        return self.createFunctionPrototype('Reset',data=False)
                    
    #create a function to reset the logging structure
    def createResetFunction(self):
        
        #add the reset function to the c file
        self.cFile.appendComment('Reset the log data struct (e.g. after writing to memory)')
        self.cFile.appendComment('Only the selection bits need to be reset')
        self.cFile.appendLine(self.resetPrototype())
        self.cFile.openBrace()
        
        self.cFile.appendLine("memset(selection,0,sizeof(" + bitfieldStruct(self.prefix) + "));")
        
        self.cFile.closeBrace()
        self.cFile.appendLine()
        
    """
    Functions for copying data out of a struct and into a linear buffer
    """
    def copyAllPrototype(self):
        return self.createFunctionPrototype('CopyAllToBuffer',bits=False,params={'*dest' : 'void'})
        
    #create a function to copy ALL parameters across, conserving data format
    def createCopyAllFunction(self):
        
        self.cFile.appendComment("Copy ALL data in the log struct to the provided address")
        self.cFile.appendComment("Data will be copied even if the associated selection bit is cleared")
        
        self.cFile.appendLine(self.copyAllPrototype())
        self.cFile.openBrace()
        self.cFile.appendLine('memcpy(dest, data, sizeof({struct}));'.format(struct=dataStruct(self.prefix)))
        self.cFile.closeBrace()
        self.cFile.appendLine()

    def copySelectedPrototype(self):
        return self.createFunctionPrototype('CopyDataToBuffer',params={'*dest' : 'void'}, returnType='uint16_t')
        
    #create a function that copies across ONLY the bits that are set
    def createCopySelectedFunction(self):
        self.cFile.appendComment("Copy across data whose selection bit is set in the provided bitfield")
        self.cFile.appendComment("Only data selected will be copied (in sequence)")
        self.cFile.appendComment("Ensure a copy of the selection bits is stored for decoding")
        self.cFile.appendLine(self.copySelectedPrototype());
        self.cFile.openBrace()
        self.cFile.appendLine('void* ptr = dest; //Pointer for keeping track of data addressing')
        self.cFile.appendLine('uint16_t count = 0; //Variable for keeping track of how many bytes were copied')
        self.cFile.appendLine()
        self.cFile.appendComment('Copy the selection for keeping track of data')
        self.cFile.appendLine('memcpy(ptr, selection, sizeof({struct}));'.format(struct=bitfieldStruct(self.prefix)))
        self.cFile.appendLine('ptr += sizeof({struct});'.format(struct=bitfieldStruct(self.prefix)))
        self.cFile.appendLine()
        self.cFile.appendComment('Check each variable in the logging struct to see if it should be added')
        
        for var in self.variables:
            self.cFile.appendLine(var.checkBit('selection'))
            self.cFile.openBrace()
            #copy the data across
            self.cFile.appendLine('memcpy(ptr, &({ptr}), {size}); //Copy the data'.format(ptr=var.getPtr('data'), size=var.getSize('data')))
            self.cFile.appendLine('ptr += {size}; //Increment the pointer'.format(size=var.getSize('data')))
            self.cFile.appendLine('count += {size}; //Increase the count'.format(size=var.getSize('data')))
            self.cFile.closeBrace()
        
        self.cFile.appendLine()
        self.cFile.appendLine('return count; //Return the number of bytes that were actually copied')
        self.cFile.closeBrace()
        self.cFile.appendLine()
        
    """
    Functions for copying data back out of a buffer
    """
    def copyAllFromPrototype(self):
        return self.createFunctionPrototype(
                            'CopyAllFromBuffer',
                            bits = False,
                            params = {'*src' : 'void'})
                            
    def createCopyAllFromFunction(self):
        self.cFile.appendComment("Copy across *all* data from a buffer")
        self.cFile.appendComment("Data will be copied even if it is invalid (selection bit is cleared)")
        self.cFile.appendLine(self.copyAllFromPrototype())
        self.cFile.openBrace()
        self.cFile.appendLine("memcpy(data,src,sizeof({struct}));".format(struct=dataStruct(self.prefix)))
        self.cFile.closeBrace()
        self.cFile.appendLine()

class LogVariable:

    #prefix = name of the 'device'
    #name = name of this variable
    #format = primitive datatype
    #comment = comment string
    def __init__(self, prefix, name, format, comment=None, units='dimensionless', scaler=1.0):
        self.prefix = prefix
        self.name = name
        self.format = self.parseFormat(format)
        self.comment = "//!< " + str(comment) if comment else ""
        self.units = units
        self.scaler = scaler
        
    def parseFormat(self, format):
        format = format.replace("unsigned","uint")
        format = format.replace("signed","int")
        if not format.endswith("_t"):
            format = format + "_t"
            
        return format
        
    #datatype definition string (with comment appended)
    def dataString(self):
        return "{datatype} {name}; {comment}".format(
                datatype = self.format,
                name = self.name,
                comment = self.comment)
                
    #bitfield definition string (with comment appended)
    def bitfieldString(self):
        return "unsigned {name} : 1; {comment}".format(
                name = self.name,
                comment = self.comment)
                
    #wrap a given function name
    def getFunctionName(self, fnName):
        return "{fn}{name}".format(name=self.name.capitalize(), fn=fnName.capitalize())
        
    #return an enum line
    def getEnum(self):
        return "LOG_{pref}_{name}".format(pref=self.prefix.upper(),name=self.name.upper())
        
    #assume there is always a pointer to *log
    
    #get the pointer to the data type within a given struct
    def getPtr(self, struct):
        return '{struct}->{name}'.format(struct=struct,name=self.name)
    
    #check if a bit is set
    #returns a string of the format 'if (bits->name)'
    def checkBit(self,struct='bits'):
        return 'if ({bit})'.format(bit=self.getPtr(struct))
        
    #check if a bit is not set
    def checkNotBit(self,struct='bits'):
        return 'if ({bit} == 0)'.format(bit=self.getPtr(struct))
        
    #code prototype to set the selection bit
    def setBit(self,struct='bits'):
        return '{bit} = 1; //Set the {name} bit'.format(bit=self.getPtr(struct), name=self.name)
        
    #code prototype to clear the selection bit
    def clearBit(self,struct='bits'):
        return '{bit} = 0; //Clear the {name} bit'.format(bit=self.getPtr(struct), name=self.name)
        
    def getSize(self, struct):
        return 'sizeof({struct}->{name})'.format(struct=struct,name=self.name)
        
    #add the variable to the struct
    def addVariable(self, struct):
        return "{struct}->{name} = {name}; //Add the '{name}' variable".format(struct=struct,name=self.name)
